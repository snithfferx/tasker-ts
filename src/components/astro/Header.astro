---
import { APP_NAME } from '@Configs/constants';
import ThemeToggle from '@Components/react/ThemeToggle';

interface Props {
  currentPage?: string;
}

const { currentPage = '' } = Astro.props;

// Check for authentication by reading the auth cookie
const authToken = Astro.cookies.get('auth-token');
const isAuthenticated = !!authToken;

const navItems = [
  { name: 'Features', href: '#features' },
  { name: 'Pricing', href: '/pricing' },
  { name: 'Documentation', href: '/docs' },
  { name: 'About', href: '/about' },
];

const userMenuItems = [
  { name: 'Profile', href: '/profile' },
  { name: 'Tasks', href: '/tasks' },
  { name: 'Categories', href: '/categories' },
];

const isActive = (path: string) => currentPage === path;
---

<header class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-10 transition-colors duration-300">
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" aria-label="Top">
    <div class="flex justify-between items-center h-16">
      <div class="flex items-center">
        <a href="/" class="flex items-center">
          <span class="text-xl font-bold text-indigo-600 dark:text-indigo-400">{APP_NAME}</span>
        </a>
        <div class="hidden md:flex md:ml-10 md:space-x-8">
          {navItems.map((item) => (
            <a 
              href={item.href}
              class={`text-base font-medium ${
                isActive(item.href) 
                  ? 'text-indigo-600 dark:text-indigo-400' 
                  : 'text-gray-500 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white'
              } transition-colors`}
            >
              {item.name}
            </a>
          ))}
        </div>
      </div>
      
      <div class="flex items-center space-x-4">
        <ThemeToggle client:load />
        {isAuthenticated ? (
          <>
            <a 
              href="/dashboard" 
              class="text-base font-medium text-gray-500 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition-colors"
            >
              Dashboard
            </a>
            
            <!-- User menu -->
            <div class="relative" id="user-menu-container">
              <button id="user-menu-button" class="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <span class="sr-only">Open user menu</span>
                <div class="h-8 w-8 rounded-full bg-indigo-600 text-white flex items-center justify-center font-bold">
                  U
                </div>
              </button>
              
              <div id="user-menu-dropdown" class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 hidden">
                {userMenuItems.map(item => (
                  <a href={item.href} class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">{item.name}</a>
                ))}
                <form action="/api/logout" method="post" class="w-full">
                  <button type="submit" class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">
                    Sign out
                  </button>
                </form>
              </div>
            </div>
          </>
        ) : (
          <>
            <a 
              href="/login" 
              class="text-base font-medium text-gray-500 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition-colors"
            >
              Sign in
            </a>
            <a 
              href="/register" 
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Get started
            </a>
          </>
        )}
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const userMenuButton = document.getElementById('user-menu-button');
    const userMenuDropdown = document.getElementById('user-menu-dropdown');
    const userMenuContainer = document.getElementById('user-menu-container');

    if (userMenuButton && userMenuDropdown && userMenuContainer) {
      userMenuButton.addEventListener('click', (event) => {
        event.stopPropagation();
        userMenuDropdown.classList.toggle('hidden');
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (event) => {
        if (!userMenuContainer.contains(event.target as Node)) {
          userMenuDropdown.classList.add('hidden');
        }
      });
    }
  });
</script>